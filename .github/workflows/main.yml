name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: jatdev-registry/lms-back

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ build-and-test ]
    steps:
    - uses: actions/checkout@v4
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DO_USERNAME }}
        password: ${{ secrets.DO_TOKEN}}
    - name: Extract Docker Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha
          type=semver,pattern={{version}}
    - name: Build Docker Image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Export Image ID
      run: echo "IMAGE_ID=${{ steps.docker_build.outputs.imageid }}" >> $GITHUB_ENV

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]
    steps:
    - uses: actions/checkout@v4
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DO_USERNAME }}
        password: ${{ secrets.DO_TOKEN}}
    - name: Extract Docker Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha
          type=semver,pattern={{version}}
    - name: Build Docker Image (for Scan)
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Scan Docker Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.docker_build.outputs.imageid }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        output: trivy.txt
    - name: Publish Trivy Output to Summary
      run: |
        if [[ -s trivy.txt ]]; then
        {
            echo "### Security Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```Scanning Results'
            cat trivy.txt
            echo '```'
            echo "</details>"
        } >> $GITHUB_STEP_SUMMARY
        fi

  # push-docker-image:
  #   name: Push Docker Image to Registry
  #   runs-on: ubuntu-latest
  #   needs: [ security-scan ]
  #   if: github.event_name != 'pull_request'
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Log in to DigitalOcean Container Registry
  #     uses: docker/login-action@v2
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ secrets.DO_USERNAME }}
  #       password: ${{ secrets.DO_TOKEN}}
  #   - name: Extract Docker Metadata
  #     id: meta
  #     uses: docker/metadata-action@v4
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #       tags: |
  #         type=sha
  #         type=semver,pattern={{version}}
  #   - name: Push Docker Image
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}